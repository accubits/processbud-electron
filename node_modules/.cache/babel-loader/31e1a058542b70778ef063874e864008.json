{"ast":null,"code":"/*!\n* rete-connection-plugin v0.9.0 \n* (c) 2019 Vitaliy Stoliarov \n* Released under the MIT license.\n*/\nfunction ___$insertStyle(css) {\n  if (!css) {\n    return;\n  }\n\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  var style = document.createElement('style');\n  style.setAttribute('type', 'text/css');\n  style.innerHTML = css;\n  document.head.appendChild(style);\n  return css;\n}\n\nimport { Output, Input } from 'rete';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction toTrainCase(str) {\n  return str.toLowerCase().replace(/ /g, '-');\n}\n\nfunction getMapItemRecursively(map, el) {\n  return map.get(el) || (el.parentElement ? getMapItemRecursively(map, el.parentElement) : null);\n}\n\nfunction defaultPath(points, curvature) {\n  var _points = _slicedToArray(points, 4),\n      x1 = _points[0],\n      y1 = _points[1],\n      x2 = _points[2],\n      y2 = _points[3];\n\n  var hx1 = x1 + Math.abs(x2 - x1) * curvature;\n  var hx2 = x2 - Math.abs(x2 - x1) * curvature;\n  return \"M \".concat(x1, \" \").concat(y1, \" C \").concat(hx1, \" \").concat(y1, \" \").concat(hx2, \" \").concat(y2, \" \").concat(x2, \" \").concat(y2);\n}\n\nfunction renderPathData(emitter, points, connection) {\n  var data = {\n    points: points,\n    connection: connection,\n    d: ''\n  };\n  emitter.trigger('connectionpath', data);\n  return data.d || defaultPath(points, 0.4);\n}\n\nfunction updateConnection(_ref) {\n  var el = _ref.el,\n      d = _ref.d;\n  var path = el.querySelector('.connection path');\n  if (!path) throw new Error('Path of connection was broken');\n  path.setAttribute('d', d);\n}\n\nfunction renderConnection(_ref2) {\n  var _svg$classList;\n\n  var el = _ref2.el,\n      d = _ref2.d,\n      connection = _ref2.connection;\n  var classed = !connection ? [] : ['input-' + toTrainCase(connection.input.name), 'output-' + toTrainCase(connection.output.name), 'socket-input-' + toTrainCase(connection.input.socket.name), 'socket-output-' + toTrainCase(connection.output.socket.name)];\n  var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n  (_svg$classList = svg.classList).add.apply(_svg$classList, ['connection'].concat(classed));\n\n  path.classList.add('main-path');\n  path.setAttribute('d', d);\n  svg.appendChild(path);\n  el.appendChild(svg);\n  updateConnection({\n    el: el,\n    d: d\n  });\n}\n\nvar PickerView = /*#__PURE__*/function () {\n  function PickerView(emitter, editorView) {\n    _classCallCheck(this, PickerView);\n\n    this.emitter = emitter;\n    this.editorView = editorView;\n\n    _defineProperty(this, \"el\", void 0);\n\n    this.el = document.createElement('div');\n    this.el.style.position = 'absolute';\n    this.editorView.area.appendChild(this.el);\n  }\n\n  _createClass(PickerView, [{\n    key: \"updatePseudoConnection\",\n    value: function updatePseudoConnection(io) {\n      if (io !== null) {\n        this.renderConnection(io);\n      } else if (this.el.parentElement) {\n        this.el.innerHTML = '';\n      }\n    }\n  }, {\n    key: \"getPoints\",\n    value: function getPoints(io) {\n      var mouse = this.editorView.area.mouse;\n      if (!io.node) throw new Error('Node in output/input not found');\n      var node = this.editorView.nodes.get(io.node);\n      if (!node) throw new Error('Node view not found');\n\n      var _node$getSocketPositi = node.getSocketPosition(io),\n          _node$getSocketPositi2 = _slicedToArray(_node$getSocketPositi, 2),\n          x1 = _node$getSocketPositi2[0],\n          y1 = _node$getSocketPositi2[1];\n\n      return io instanceof Output ? [x1, y1, mouse.x, mouse.y] : [mouse.x, mouse.y, x1, y1];\n    }\n  }, {\n    key: \"updateConnection\",\n    value: function updateConnection$1(io) {\n      var d = renderPathData(this.emitter, this.getPoints(io));\n      updateConnection({\n        el: this.el,\n        d: d\n      });\n    }\n  }, {\n    key: \"renderConnection\",\n    value: function renderConnection$1(io) {\n      var d = renderPathData(this.emitter, this.getPoints(io));\n      renderConnection({\n        el: this.el,\n        d: d\n      });\n    }\n  }]);\n\n  return PickerView;\n}();\n\nvar Picker = /*#__PURE__*/function () {\n  function Picker(editor) {\n    var _this = this;\n\n    _classCallCheck(this, Picker);\n\n    _defineProperty(this, \"editor\", void 0);\n\n    _defineProperty(this, \"_io\", null);\n\n    _defineProperty(this, \"view\", void 0);\n\n    this.editor = editor;\n    this.view = new PickerView(editor, editor.view);\n    editor.on('mousemove', function () {\n      return _this.io && _this.view.updateConnection(_this.io);\n    });\n  }\n\n  _createClass(Picker, [{\n    key: \"reset\",\n    value: function reset() {\n      this.io = null;\n    }\n  }, {\n    key: \"pickOutput\",\n    value: function pickOutput(output) {\n      if (!this.editor.trigger('connectionpick', output)) return;\n\n      if (this.io instanceof Input) {\n        if (!output.multipleConnections && output.hasConnection()) this.editor.removeConnection(output.connections[0]);\n        this.editor.connect(output, this.io);\n        this.reset();\n        return;\n      }\n\n      if (this.io) this.reset();\n      this.io = output;\n    }\n  }, {\n    key: \"pickInput\",\n    value: function pickInput(input) {\n      var _this2 = this;\n\n      if (!this.editor.trigger('connectionpick', input)) return;\n\n      if (this.io === null) {\n        if (input.hasConnection()) {\n          this.io = input.connections[0].output;\n          this.editor.removeConnection(input.connections[0]);\n        } else {\n          this.io = input;\n        }\n\n        return true;\n      }\n\n      if (!input.multipleConnections && input.hasConnection()) this.editor.removeConnection(input.connections[0]);\n      if (!this.io.multipleConnections && this.io.hasConnection()) this.editor.removeConnection(this.io.connections[0]);\n\n      if (this.io instanceof Output && this.io.connectedTo(input)) {\n        var connection = input.connections.find(function (c) {\n          return c.output === _this2.io;\n        });\n\n        if (connection) {\n          this.editor.removeConnection(connection);\n        }\n      }\n\n      if (this.io instanceof Output) {\n        this.editor.connect(this.io, input);\n        this.reset();\n      }\n    }\n  }, {\n    key: \"pickConnection\",\n    value: function pickConnection(connection) {\n      var output = connection.output;\n      this.editor.removeConnection(connection);\n      this.io = output;\n    }\n  }, {\n    key: \"io\",\n    get: function get() {\n      return this._io;\n    },\n    set: function set(io) {\n      this._io = io;\n      this.view.updatePseudoConnection(io);\n    }\n  }]);\n\n  return Picker;\n}();\n\nvar Flow = /*#__PURE__*/function () {\n  function Flow(picker) {\n    _classCallCheck(this, Flow);\n\n    _defineProperty(this, \"picker\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    this.picker = picker;\n    this.target = null;\n  }\n\n  _createClass(Flow, [{\n    key: \"act\",\n    value: function act(_ref) {\n      var input = _ref.input,\n          output = _ref.output;\n      if (this.unlock(input || output)) return;\n      if (input) this.picker.pickInput(input);else if (output) this.picker.pickOutput(output);else this.picker.reset();\n    }\n  }, {\n    key: \"start\",\n    value: function start(params, io) {\n      this.act(params);\n      this.target = io;\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.act(params);\n    }\n  }, {\n    key: \"hasTarget\",\n    value: function hasTarget() {\n      return Boolean(this.target);\n    }\n  }, {\n    key: \"unlock\",\n    value: function unlock(io) {\n      var target = this.target;\n      this.target = null;\n      return target && target === io;\n    }\n  }]);\n\n  return Flow;\n}();\n\n___$insertStyle(\".connection {\\n  overflow: visible !important;\\n  position: absolute;\\n  z-index: -1;\\n  pointer-events: none; }\\n  .connection > * {\\n    pointer-events: all; }\\n  .connection .main-path {\\n    fill: none;\\n    stroke-width: 5px;\\n    stroke: steelblue; }\\n\");\n\nfunction install(editor) {\n  editor.bind('connectionpath');\n  editor.bind('connectiondrop');\n  editor.bind('connectionpick');\n  editor.bind('resetconnection');\n  var picker = new Picker(editor);\n  var flow = new Flow(picker);\n  var socketsParams = new WeakMap();\n\n  function pointerDown(e) {\n    var flowParams = socketsParams.get(this);\n\n    if (flowParams) {\n      var input = flowParams.input,\n          output = flowParams.output;\n      editor.view.container.dispatchEvent(new PointerEvent('pointermove', e));\n      e.preventDefault();\n      e.stopPropagation();\n      flow.start({\n        input: input,\n        output: output\n      }, input || output);\n    }\n  }\n\n  function pointerUp(e) {\n    var flowEl = document.elementFromPoint(e.clientX, e.clientY);\n\n    if (picker.io) {\n      editor.trigger('connectiondrop', picker.io);\n    }\n\n    if (flowEl) {\n      flow.complete(getMapItemRecursively(socketsParams, flowEl) || {});\n    }\n  }\n\n  editor.on('resetconnection', function () {\n    return flow.complete();\n  });\n  editor.on('rendersocket', function (_ref) {\n    var el = _ref.el,\n        input = _ref.input,\n        output = _ref.output;\n    socketsParams.set(el, {\n      input: input,\n      output: output\n    });\n    el.removeEventListener('pointerdown', pointerDown);\n    el.addEventListener('pointerdown', pointerDown);\n  });\n  window.addEventListener('pointerup', pointerUp);\n  editor.on('renderconnection', function (_ref2) {\n    var el = _ref2.el,\n        connection = _ref2.connection,\n        points = _ref2.points;\n    var d = renderPathData(editor, points, connection);\n    renderConnection({\n      el: el,\n      d: d,\n      connection: connection\n    });\n  });\n  editor.on('updateconnection', function (_ref3) {\n    var el = _ref3.el,\n        connection = _ref3.connection,\n        points = _ref3.points;\n    var d = renderPathData(editor, points, connection);\n    updateConnection({\n      el: el,\n      d: d\n    });\n  });\n  editor.on('destroy', function () {\n    window.removeEventListener('pointerup', pointerUp);\n  });\n}\n\nvar index = {\n  name: 'connection',\n  install: install\n};\nexport default index;\nexport { defaultPath };","map":{"version":3,"sources":["../src/utils.ts","../src/picker/view.ts","../src/picker/index.ts","../src/flow.ts","../src/index.ts"],"names":["str","map","el","getMapItemRecursively","x1","y1","x2","y2","hx1","Math","hx2","data","points","connection","d","emitter","defaultPath","path","classed","toTrainCase","svg","document","updateConnection","PickerView","io","mouse","node","renderPathData","renderConnection","Picker","editor","output","input","c","Flow","params","Boolean","target","picker","flow","socketsParams","flowParams","e","flowEl","window","name","install"],"mappings":"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","sourcesContent":["import { Emitter, Connection } from 'rete';\nimport { EventsTypes } from 'rete/types/events';\n\nfunction toTrainCase(str: string) {\n    return str.toLowerCase().replace(/ /g, '-');\n}\n\nexport function getMapItemRecursively<T extends any>(map: WeakMap<Element, T>, el: Element): T | null {\n    return map.get(el) || (el.parentElement ? getMapItemRecursively(map, el.parentElement) : null);\n}\n\nexport function defaultPath(points: number[], curvature: number) {\n    const [x1, y1, x2, y2] = points;\n    const hx1 = x1 + Math.abs(x2 - x1) * curvature;\n    const hx2 = x2 - Math.abs(x2 - x1) * curvature;\n\n    return `M ${x1} ${y1} C ${hx1} ${y1} ${hx2} ${y2} ${x2} ${y2}`;\n}\n\nexport function renderPathData(emitter: Emitter<EventsTypes>, points: number[], connection?: Connection) {\n    const data = { points, connection, d: '' };\n    \n    emitter.trigger('connectionpath', data);\n    \n    return data.d || defaultPath(points, 0.4);\n}\n\nexport function updateConnection({ el, d } : { el: HTMLElement, d: string }) {\n    const path = el.querySelector('.connection path');\n\n    if (!path) throw new Error('Path of connection was broken');\n\n    path.setAttribute('d', d);\n}\n\nexport function renderConnection({ el, d, connection } : { el: HTMLElement, d: string, connection?: Connection }) {\n    const classed = !connection?[]:[\n        'input-' + toTrainCase(connection.input.name),\n        'output-' + toTrainCase(connection.output.name),\n        'socket-input-' + toTrainCase(connection.input.socket.name),\n        'socket-output-' + toTrainCase(connection.output.socket.name)\n    ];\n\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\n    svg.classList.add('connection', ...classed);\n    path.classList.add('main-path');\n    path.setAttribute('d', d);\n\n    svg.appendChild(path);\n    el.appendChild(svg);\n\n    updateConnection({ el, d });\n}","import { Output, Input, Emitter } from 'rete';\nimport { EditorView } from 'rete/types/view/index';\nimport { EventsTypes } from 'rete/types/events';\nimport { renderConnection, renderPathData, updateConnection } from '../utils';\n\nexport class PickerView {\n\n    private el: HTMLElement;\n\n    constructor(\n        private emitter: Emitter<EventsTypes>,\n        private editorView: EditorView\n    ) {\n        this.el = document.createElement('div');\n        this.el.style.position = 'absolute';\n        this.editorView.area.appendChild(this.el);\n    }\n\n    updatePseudoConnection(io: Output | Input | null) {\n        if (io !== null) {\n            this.renderConnection(io);\n        } else if (this.el.parentElement) {\n            this.el.innerHTML = '';\n        }\n    }\n\n    private getPoints(io: Output | Input): number[] {\n        const mouse = this.editorView.area.mouse;\n\n        if(!io.node) throw new Error('Node in output/input not found')\n    \n        const node = this.editorView.nodes.get(io.node);\n\n        if(!node) throw new Error('Node view not found')\n    \n        const [x1, y1] = node.getSocketPosition(io);\n\n        return io instanceof Output\n            ? [x1, y1, mouse.x, mouse.y]\n            : [mouse.x, mouse.y, x1, y1];\n    }\n\n    updateConnection(io: Output | Input) {\n        const d = renderPathData(this.emitter, this.getPoints(io));\n\n        updateConnection({ el: this.el, d });\n    }\n\n    renderConnection(io: Output | Input) {\n        const d = renderPathData(this.emitter, this.getPoints(io));\n\n        renderConnection({ el: this.el, d });\n    }\n}","import { NodeEditor, Input, Output, Connection } from 'rete';\nimport { PickerView } from './view';\n\nexport class Picker {\n\n    private editor: NodeEditor;\n    private _io: Output | Input | null = null;\n    public view: PickerView;\n\n    constructor(editor: NodeEditor) {\n        this.editor = editor;\n        this.view = new PickerView(editor, editor.view);\n\n        editor.on('mousemove', () => this.io && this.view.updateConnection(this.io));\n    }\n\n    get io() : Output | Input | null {\n        return this._io;\n    }\n\n    set io(io: Output | Input | null) {\n        this._io = io;\n        this.view.updatePseudoConnection(io);\n    }\n\n    reset() {\n        this.io = null;\n    }\n\n    pickOutput(output: Output) {\n        if (!this.editor.trigger('connectionpick', output)) return;\n        \n        if (this.io instanceof Input) {\n            if(!output.multipleConnections && output.hasConnection())\n                this.editor.removeConnection(output.connections[0])\n    \n            this.editor.connect(output, this.io);\n            this.reset();\n            return;\n        }\n\n        if (this.io) this.reset();\n        this.io = output;\n    }\n\n    pickInput(input: Input) {\n        if (!this.editor.trigger('connectionpick', input)) return;\n\n        if (this.io === null) {\n            if (input.hasConnection()) {\n                this.io = input.connections[0].output;\n                this.editor.removeConnection(input.connections[0]);\n            } else {\n                this.io = input;\n            }\n            return true;\n        }\n\n        if (!input.multipleConnections && input.hasConnection())\n            this.editor.removeConnection(input.connections[0]);\n        \n        if (!this.io.multipleConnections && this.io.hasConnection())\n            this.editor.removeConnection(this.io.connections[0]);\n        \n        if (this.io instanceof Output && this.io.connectedTo(input)) {\n            let connection = input.connections.find(c => c.output === this.io);\n\n            if(connection) {\n                this.editor.removeConnection(connection);\n            }\n        }\n\n        if(this.io instanceof Output) {\n            this.editor.connect(this.io, input);\n            this.reset();\n        }\n    }\n\n    pickConnection(connection: Connection) {\n        const { output } = connection;\n\n        this.editor.removeConnection(connection);\n        this.io = output;\n    }\n}","import { IO, Input, Output } from 'rete';\nimport { Picker } from './picker';\n\nexport type FlowParams = { input?: Input, output?: Output };\n\nexport class Flow {\n\n    private picker: Picker;\n    private target?: IO | null;\n\n    constructor(picker: Picker) {\n        this.picker = picker;\n        this.target = null;\n    }\n\n    private act({ input, output }: FlowParams) {\n        if (this.unlock(input || output)) return\n\n        if (input)\n            this.picker.pickInput(input)\n        else if (output)\n            this.picker.pickOutput(output)\n        else\n            this.picker.reset();\n    }\n\n    public start(params: FlowParams, io?: IO) {\n        this.act(params);\n        this.target = io;\n    }\n\n    public complete(params: FlowParams = {}) {\n        this.act(params);\n    }\n\n    public hasTarget() {\n        return Boolean(this.target);\n    }\n\n    private unlock(io?: IO) {\n        const target = this.target;\n\n        this.target = null;\n\n        return target && target === io;\n    }\n}","import { NodeEditor } from 'rete';\nimport { renderConnection, renderPathData, updateConnection, getMapItemRecursively } from './utils';\nimport { Picker } from './picker';\nimport { Flow, FlowParams } from './flow';\nimport './events';\nimport './index.sass';\n\nfunction install(editor: NodeEditor) {\n    editor.bind('connectionpath');\n    editor.bind('connectiondrop');\n    editor.bind('connectionpick');\n    editor.bind('resetconnection');\n    \n    const picker = new Picker(editor);\n    const flow = new Flow(picker);\n    const socketsParams = new WeakMap<Element, FlowParams>();\n    \n    function pointerDown(this: HTMLElement, e: PointerEvent) {\n        const flowParams = socketsParams.get(this);\n\n        if(flowParams) {\n            const { input, output } = flowParams;\n            \n            editor.view.container.dispatchEvent(new PointerEvent('pointermove', e));\n            e.preventDefault();\n            e.stopPropagation();\n            flow.start({ input, output }, input || output);\n        }\n    }\n\n    function pointerUp(this: Window, e: PointerEvent) {\n        const flowEl = document.elementFromPoint(e.clientX, e.clientY);\n\n        if(picker.io) {\n            editor.trigger('connectiondrop', picker.io)\n        }\n        if(flowEl) {\n            flow.complete(getMapItemRecursively(socketsParams, flowEl) || {})\n        }\n    }\n\n    editor.on('resetconnection', () => flow.complete());\n\n    editor.on('rendersocket', ({ el, input, output }) => {\n        socketsParams.set(el, { input, output });\n\n        el.removeEventListener('pointerdown', pointerDown);\n        el.addEventListener('pointerdown', pointerDown);\n    });\n\n    window.addEventListener('pointerup', pointerUp);\n\n    editor.on('renderconnection', ({ el, connection, points }) => {\n        const d = renderPathData(editor, points, connection);\n\n        renderConnection({ el, d, connection })\n    });\n\n    editor.on('updateconnection', ({ el, connection, points }) => {\n        const d = renderPathData(editor, points, connection);\n\n        updateConnection({ el, d });\n    });\n\n    editor.on('destroy', () => {\n        window.removeEventListener('pointerup', pointerUp);\n    });\n}\n\nexport default {\n    name: 'connection',\n    install\n}\nexport { defaultPath } from './utils';"]},"metadata":{},"sourceType":"module"}