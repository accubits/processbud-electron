{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leela\\\\OneDrive\\\\Desktop\\\\pb-angular-electron-main\\\\21-06-2021\\\\processbud\\\\src\\\\components\\\\MyNode.jsx\";\nimport React from \"react\";\nimport { Node, Socket, Control } from \"rete-react-render-plugin\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MyNode extends Node {\n  render() {\n    debugger;\n    const {\n      node,\n      bindSocket,\n      bindControl\n    } = this.props;\n    const {\n      outputs,\n      controls,\n      inputs,\n      selected\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `node ${selected}`,\n      style: {\n        background: \"grey\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: [\"<<\", \" \", node.name, \" \", \">>\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), outputs.map(output => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"output-title\",\n          children: output.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Socket, {\n          type: \"output\",\n          socket: output.socket,\n          io: output,\n          innerRef: bindSocket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }, this)]\n      }, output.key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this)), controls.map(control => /*#__PURE__*/_jsxDEV(Control, {\n        className: \"control\",\n        control: control,\n        innerRef: bindControl\n      }, control.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)), inputs.map(input => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(Socket, {\n          type: \"input\",\n          socket: input.socket,\n          io: input,\n          innerRef: bindSocket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), !input.showControl() && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-title\",\n          children: input.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this), input.showControl() && /*#__PURE__*/_jsxDEV(Control, {\n          className: \"input-control\",\n          control: input.control,\n          innerRef: bindControl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this)]\n      }, input.key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/leela/OneDrive/Desktop/pb-angular-electron-main/21-06-2021/processbud/src/components/MyNode.jsx"],"names":["React","Node","Socket","Control","MyNode","render","node","bindSocket","bindControl","props","outputs","controls","inputs","selected","state","background","name","map","output","socket","key","control","input","showControl"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,QAAsC,0BAAtC;;AAEA,OAAO,MAAMC,MAAN,SAAqBH,IAArB,CAA0B;AAC/BI,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA;AAApB,QAAoC,KAAKC,KAA/C;AACA,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,QAAX;AAAqBC,MAAAA,MAArB;AAA6BC,MAAAA;AAA7B,QAA0C,KAAKC,KAArD;AAEA,wBACE;AAAK,MAAA,SAAS,EAAG,QAAOD,QAAS,EAAjC;AAAoC,MAAA,KAAK,EAAE;AAAEE,QAAAA,UAAU,EAAE;AAAd,OAA3C;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,mBACG,IADH,OACUT,IAAI,CAACU,IADf,OACsB,IADtB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAKGN,OAAO,CAACO,GAAR,CAAYC,MAAM,iBACjB;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,oBAA+BA,MAAM,CAACF;AAAtC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,MAAM,EAAEE,MAAM,CAACC,MAFjB;AAGE,UAAA,EAAE,EAAED,MAHN;AAIE,UAAA,QAAQ,EAAEX;AAJZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAA6BW,MAAM,CAACE,GAApC;AAAA;AAAA;AAAA;AAAA,cADD,CALH,EAiBGT,QAAQ,CAACM,GAAT,CAAaI,OAAO,iBACnB,QAAC,OAAD;AACE,QAAA,SAAS,EAAC,SADZ;AAGE,QAAA,OAAO,EAAEA,OAHX;AAIE,QAAA,QAAQ,EAAEb;AAJZ,SAEOa,OAAO,CAACD,GAFf;AAAA;AAAA;AAAA;AAAA,cADD,CAjBH,EA0BGR,MAAM,CAACK,GAAP,CAAWK,KAAK,iBACf;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,MAAM,EAAEA,KAAK,CAACH,MAFhB;AAGE,UAAA,EAAE,EAAEG,KAHN;AAIE,UAAA,QAAQ,EAAEf;AAJZ;AAAA;AAAA;AAAA;AAAA,gBADF,EAOG,CAACe,KAAK,CAACC,WAAN,EAAD,iBACC;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,oBAA8BD,KAAK,CAACN;AAApC;AAAA;AAAA;AAAA;AAAA,gBARJ,EAUGM,KAAK,CAACC,WAAN,mBACC,QAAC,OAAD;AACE,UAAA,SAAS,EAAC,eADZ;AAEE,UAAA,OAAO,EAAED,KAAK,CAACD,OAFjB;AAGE,UAAA,QAAQ,EAAEb;AAHZ;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA,SAA4Bc,KAAK,CAACF,GAAlC;AAAA;AAAA;AAAA;AAAA,cADD,CA1BH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiDD;;AAvD8B","sourcesContent":["import React from \"react\";\nimport { Node, Socket, Control } from \"rete-react-render-plugin\";\n\nexport class MyNode extends Node {\n  render() {\n    debugger\n    const { node, bindSocket, bindControl } = this.props;\n    const { outputs, controls, inputs, selected } = this.state;\n\n    return (\n      <div className={`node ${selected}`} style={{ background: \"grey\" }}>\n        <div className=\"title\">\n          {\"<<\"} {node.name} {\">>\"}\n        </div>\n        {/* Outputs */}\n        {outputs.map(output => (\n          <div className=\"output\" key={output.key}>\n            <div className=\"output-title\">{output.name}</div>\n            <Socket\n              type=\"output\"\n              socket={output.socket}\n              io={output}\n              innerRef={bindSocket}\n            />\n          </div>\n        ))}\n        {/* Controls */}\n        {controls.map(control => (\n          <Control\n            className=\"control\"\n            key={control.key}\n            control={control}\n            innerRef={bindControl}\n          />\n        ))}\n        {/* Inputs */}\n        {inputs.map(input => (\n          <div className=\"input\" key={input.key}>\n            <Socket\n              type=\"input\"\n              socket={input.socket}\n              io={input}\n              innerRef={bindSocket}\n            />\n            {!input.showControl() && (\n              <div className=\"input-title\">{input.name}</div>\n            )}\n            {input.showControl() && (\n              <Control\n                className=\"input-control\"\n                control={input.control}\n                innerRef={bindControl}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}